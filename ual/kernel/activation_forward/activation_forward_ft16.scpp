// BSD 3- Clause License Copyright (c) 2024, Tecorigin Co., Ltd. All rights
// reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
// Redistributions of source code must retain the above copyright notice,
// this list of conditions and the following disclaimer.
// Redistributions in binary form must reproduce the above copyright notice,
// this list of conditions and the following disclaimer in the documentation
// and/or other materials provided with the distribution.
// Neither the name of the copyright holder nor the names of its contributors
// may be used to endorse or promote products derived from this software
// without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
// STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  ARISING IN ANY
// WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
// OF SUCH DAMAGE.

#include "ual/kernel/activation_forward/activation_forward.h"
#include "ual/kernel/macro.h"
#include "ual/com/check.h"

using namespace sdaa;
using namespace tecoal::ual::common;

namespace tecoal {
namespace ual {
namespace kernel {

#define MAX_BLOCK_NUM (24 << 10)  // 24K half elements, use 48KB space

#define MIN(a, b) ((a) < (b) ? (a) : (b))

#define CDBUF(x) (x + (x##_size >> 1) * x##_dbflag)        // current double buffer addr
#define ADBUF(x) (x + (1 - x##_dbflag) * (x##_size >> 1))  // another double buffer
#define EXDBF(x) x##_dbflag = 1 - x##_dbflag               // exchange double buffer flag

typedef _Float16 *DBF16Type[2];

__device__ static __attribute__((noinline)) void silu_v1(_Float16 *x, _Float16 *y, int num);
__device__ static __attribute__((noinline)) void silu_v2(_Float16 *x, _Float16 *y, int num,
                                                         float alpha, float beta);

__device__ static __attribute__((noinline)) void forward_silu(_Float16 *x, _Float16 *y, double coef,
                                                              int num, float alpha, float beta) {
    if (fabs(alpha - 1.0f) < 1e-5 && fabs(beta) < 1e-5) {
        silu_v1(x, y, num);
    } else {
        silu_v2(x, y, num, alpha, beta);
    }
}

typedef void (*PFUNC)(_Float16 *, _Float16 *, double, int, float,
                      float);  // Defines function pointers that point to calculated functions with
                               // different activation modes

__global__ void tecoKernelActivationForwardFT16(ActivationFwdArgs arg) {
    const int thread_id = threadIdx;
    const int spe_num = arg.spe_num;
    const int data_num = arg.data_num;
    const int mode = arg.mode;
    const float coef = (float)arg.coef;
    const float alpha = arg.alpha;
    const float beta = arg.beta;
    const int need_ori_y = NEQUAL_ZERO_F(beta);

    _Float16 *x = (_Float16 *)arg.x;
    _Float16 *y = (_Float16 *)arg.y;

    PFUNC p_func;

    switch (mode) {
        case 13: {
            p_func = forward_silu;
            break;
        }
        default: CHECK(0, "no such activation mode"); break;
    }

    int blk_cell = (data_num + spe_num - 1) / spe_num;
    if ((blk_cell & 0x1) != 0)  // odd num
        blk_cell++;             // to even, because dma requires 4B alignment

    const int begin = blk_cell * thread_id;
    const int end = MIN(begin + blk_cell, data_num);

    if (begin >= end) return;

    int x_buf_dbflag = 0;
    int y_buf_dbflag = 0;

    MemcpyHandle x_handle[2];
    MemcpyHandle y_handle[2];
    MemcpyHandle put_handle[2];

    const int x_buf_size = MAX_BLOCK_NUM;

    _Float16 *leftsec = (_Float16 *)malloc(x_buf_size * 2 * sizeof(_Float16), AddressLowToHigh);
    _Float16 *rightsec = (_Float16 *)malloc(x_buf_size * 2 * sizeof(_Float16), AddressHighToLow);

    DBF16Type x_buf, y_buf;
    x_buf[0] = leftsec;
    x_buf[1] = rightsec;
    y_buf[0] = leftsec + x_buf_size;
    y_buf[1] = rightsec + x_buf_size;

    int curr_num = MIN(MAX_BLOCK_NUM, end - begin);
    int next_num = 0;
    memcpy_async(x_buf[x_buf_dbflag], x + begin, curr_num * sizeof(_Float16), MemcpyGlobalToSpm,
                 x_handle[x_buf_dbflag]);

    if (need_ori_y) {
        memcpy_async(y_buf[y_buf_dbflag], y + begin, curr_num * sizeof(_Float16), MemcpyGlobalToSpm,
                     y_handle[y_buf_dbflag]);
    } else {
        // only memset once here
        memset(y_buf[0], 0, x_buf_size * sizeof(_Float16));
        memset(y_buf[1], 0, x_buf_size * sizeof(_Float16));
    }

    for (int Idx = begin; Idx < end; Idx += MAX_BLOCK_NUM) {
        curr_num = MIN(MAX_BLOCK_NUM, end - Idx);
        next_num = MIN(MAX_BLOCK_NUM, end - Idx - MAX_BLOCK_NUM);
        if (next_num > 0) {
            memcpy_async(x_buf[1 - x_buf_dbflag], x + Idx + MAX_BLOCK_NUM,
                         next_num * sizeof(_Float16), MemcpyGlobalToSpm,
                         x_handle[1 - x_buf_dbflag]);
            if (need_ori_y) {
                memcpy_async(y_buf[1 - y_buf_dbflag], y + Idx + MAX_BLOCK_NUM,
                             next_num * sizeof(_Float16), MemcpyGlobalToSpm,
                             y_handle[1 - y_buf_dbflag]);
            }
            // no need to memset y, we haved done before;
        }

        memcpy_wait(x_handle[x_buf_dbflag]);
        memcpy_wait(y_handle[y_buf_dbflag]);
        memcpy_wait(put_handle[y_buf_dbflag]);

        if (!need_ori_y) {
            memset(y_buf[y_buf_dbflag], 0, curr_num * sizeof(_Float16));
        }
        p_func(x_buf[x_buf_dbflag], y_buf[y_buf_dbflag], coef, curr_num, alpha, beta);

        memcpy_async(y + Idx, y_buf[y_buf_dbflag], curr_num * sizeof(_Float16), MemcpySpmToGlobal,
                     put_handle[y_buf_dbflag]);
        EXDBF(x_buf);
        EXDBF(y_buf);
    }
    memcpy_wait(put_handle[1 - y_buf_dbflag]);
    memcpy_wait(put_handle[y_buf_dbflag]);

    free(leftsec);
    free(rightsec);

    return;
}

__device__ static __attribute__((noinline)) void silu_v1(_Float16 *x, _Float16 *y, int num) {
    float A[128] __attribute__((aligned(64)));
    float16v16 vha0, vha1, vha2, vha3, vha4, vha5, vha6, vha7;
    floatv16 vfa0, vfa1, vfa2, vfa3, vfa4, vfa5, vfa6, vfa7;
    floatv16 vfb0, vfb1, vfb2, vfb3, vfb4, vfb5, vfb6, vfb7;

    for (int i = 0; i < num; i += 128) {
        // load x
        simd_load(vha0, x + i);
        simd_load(vha1, x + i + 16);
        simd_load(vha2, x + i + 32);
        simd_load(vha3, x + i + 48);
        simd_load(vha4, x + i + 64);
        simd_load(vha5, x + i + 80);
        simd_load(vha6, x + i + 96);
        simd_load(vha7, x + i + 112);

        vfa0 = vha0;
        vfa1 = vha1;
        vfa2 = vha2;
        vfa3 = vha3;
        vfa4 = vha4;
        vfa5 = vha5;
        vfa6 = vha6;
        vfa7 = vha7;

        simd_store(vfa0, A);
        simd_store(vfa1, A + 16);
        simd_store(vfa2, A + 32);
        simd_store(vfa3, A + 48);
        simd_store(vfa4, A + 64);
        simd_store(vfa5, A + 80);
        simd_store(vfa6, A + 96);
        simd_store(vfa7, A + 112);

        simd_sigmoid128(A);

        simd_load(vfb0, A);
        simd_load(vfb1, A + 16);
        simd_load(vfb2, A + 32);
        simd_load(vfb3, A + 48);
        simd_load(vfb4, A + 64);
        simd_load(vfb5, A + 80);
        simd_load(vfb6, A + 96);
        simd_load(vfb7, A + 112);

        // x * sigmoid(x)
        vfa0 *= vfb0;
        vfa1 *= vfb1;
        vfa2 *= vfb2;
        vfa3 *= vfb3;
        vfa4 *= vfb4;
        vfa5 *= vfb5;
        vfa6 *= vfb6;
        vfa7 *= vfb7;

        vha0 = vfa0;
        vha1 = vfa1;
        vha2 = vfa2;
        vha3 = vfa3;
        vha4 = vfa4;
        vha5 = vfa5;
        vha6 = vfa6;
        vha7 = vfa7;

        simd_store(vha0, y + i);
        simd_store(vha1, y + i + 16);
        simd_store(vha2, y + i + 32);
        simd_store(vha3, y + i + 48);
        simd_store(vha4, y + i + 64);
        simd_store(vha5, y + i + 80);
        simd_store(vha6, y + i + 96);
        simd_store(vha7, y + i + 112);
    }
}

__device__ static __attribute__((noinline)) void silu_v2(_Float16 *x, _Float16 *y, int num,
                                                         float alpha, float beta) {
    float A[128] __attribute__((aligned(64)));
    float16v16 vha0, vha1, vha2, vha3, vha4, vha5, vha6, vha7;
    floatv16 vfa0, vfa1, vfa2, vfa3, vfa4, vfa5, vfa6, vfa7;
    floatv16 vfb0, vfb1, vfb2, vfb3, vfb4, vfb5, vfb6, vfb7;

    for (int i = 0; i < num; i += 128) {
        // load x
        simd_load(vha0, x + i);
        simd_load(vha1, x + i + 16);
        simd_load(vha2, x + i + 32);
        simd_load(vha3, x + i + 48);
        simd_load(vha4, x + i + 64);
        simd_load(vha5, x + i + 80);
        simd_load(vha6, x + i + 96);
        simd_load(vha7, x + i + 112);

        vfa0 = vha0;
        vfa1 = vha1;
        vfa2 = vha2;
        vfa3 = vha3;
        vfa4 = vha4;
        vfa5 = vha5;
        vfa6 = vha6;
        vfa7 = vha7;

        simd_store(vfa0, A);
        simd_store(vfa1, A + 16);
        simd_store(vfa2, A + 32);
        simd_store(vfa3, A + 48);
        simd_store(vfa4, A + 64);
        simd_store(vfa5, A + 80);
        simd_store(vfa6, A + 96);
        simd_store(vfa7, A + 112);

        simd_sigmoid128(A);

        // load y
        simd_load(vha0, y + i);
        simd_load(vha1, y + i + 16);
        simd_load(vha2, y + i + 32);
        simd_load(vha3, y + i + 48);
        simd_load(vha4, y + i + 64);
        simd_load(vha5, y + i + 80);
        simd_load(vha6, y + i + 96);
        simd_load(vha7, y + i + 112);

        simd_load(vfb0, A);
        simd_load(vfb1, A + 16);
        simd_load(vfb2, A + 32);
        simd_load(vfb3, A + 48);
        simd_load(vfb4, A + 64);
        simd_load(vfb5, A + 80);
        simd_load(vfb6, A + 96);
        simd_load(vfb7, A + 112);

        // x * sigmoid(x)
        vfa0 *= vfb0;
        vfa1 *= vfb1;
        vfa2 *= vfb2;
        vfa3 *= vfb3;
        vfa4 *= vfb4;
        vfa5 *= vfb5;
        vfa6 *= vfb6;
        vfa7 *= vfb7;

        vfb0 = vha0;
        vfb1 = vha1;
        vfb2 = vha2;
        vfb3 = vha3;
        vfb4 = vha4;
        vfb5 = vha5;
        vfb6 = vha6;
        vfb7 = vha7;

        // alpha * (x * sigmoid(x))
        vfa0 *= alpha;
        vfa1 *= alpha;
        vfa2 *= alpha;
        vfa3 *= alpha;
        vfa4 *= alpha;
        vfa5 *= alpha;
        vfa6 *= alpha;
        vfa7 *= alpha;

        // beta * y
        vfb0 *= beta;
        vfb1 *= beta;
        vfb2 *= beta;
        vfb3 *= beta;
        vfb4 *= beta;
        vfb5 *= beta;
        vfb6 *= beta;
        vfb7 *= beta;

        vfa0 += vfb0;
        vfa1 += vfb1;
        vfa2 += vfb2;
        vfa3 += vfb3;
        vfa4 += vfb4;
        vfa5 += vfb5;
        vfa6 += vfb6;
        vfa7 += vfb7;

        vha0 = vfa0;
        vha1 = vfa1;
        vha2 = vfa2;
        vha3 = vfa3;
        vha4 = vfa4;
        vha5 = vfa5;
        vha6 = vfa6;
        vha7 = vfa7;

        simd_store(vha0, y + i);
        simd_store(vha1, y + i + 16);
        simd_store(vha2, y + i + 32);
        simd_store(vha3, y + i + 48);
        simd_store(vha4, y + i + 64);
        simd_store(vha5, y + i + 80);
        simd_store(vha6, y + i + 96);
        simd_store(vha7, y + i + 112);
    }
}

}  // namespace kernel
}  // namespace ual
}  // namespace tecoal
