// BSD 3- Clause License Copyright (c) 2024, Tecorigin Co., Ltd. All rights
// reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
// Redistributions of source code must retain the above copyright notice,
// this list of conditions and the following disclaimer.
// Redistributions in binary form must reproduce the above copyright notice,
// this list of conditions and the following disclaimer in the documentation
// and/or other materials provided with the distribution.
// Neither the name of the copyright holder nor the names of its contributors
// may be used to endorse or promote products derived from this software
// without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
// STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  ARISING IN ANY
// WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
// OF SUCH DAMAGE.

#include "ual/kernel/logical_not_tensor/logical_not_tensor.h"
#include "ual/com/dma_all_type.h"

using namespace sdaa;
using namespace tecoal::ual::common;

namespace tecoal {
namespace ual {
namespace kernel {

#define CDBUF(x) (x + (x##_size >> 1) * x##_dbflag)
#define ADBUF(x) (x + (1 - x##_dbflag) * (x##_size >> 1))
#define EXDBF(x) x##_dbflag = 1 - x##_dbflag

__device__ static void calBool(const bool *A, bool *C, int len) {
    shortv32 v_A0, v_A1, v_A2, v_A3, v_C0, v_C1, v_C2, v_C3;
    shortv32 v_zero = 0;
    int i;
    for (i = 0; i <= len - 128; i += 128) {
        simd_load_widen(v_A0, A + i);
        simd_load_widen(v_A1, A + i + 32);
        simd_load_widen(v_A2, A + i + 64);
        simd_load_widen(v_A3, A + i + 96);

        v_C0 = (v_A0 == v_zero);
        v_C1 = (v_A1 == v_zero);
        v_C2 = (v_A2 == v_zero);
        v_C3 = (v_A3 == v_zero);

        simd_store_narrow(v_C0, C + i);
        simd_store_narrow(v_C1, C + i + 32);
        simd_store_narrow(v_C2, C + i + 64);
        simd_store_narrow(v_C3, C + i + 96);
    }

    for (; i <= len - 32; i += 32) {
        simd_load_widen(v_A0, A + i);
        v_C0 = (v_A0 == v_zero);
        simd_store_narrow(v_C0, C + i);
    }

    for (; i < len; i++) {
        C[i] = (A[i] == 0);
    }
}

__global__ void tecoKernelLogicalNotTensorBool(LogicalNotTensorArgs ntarg) {
    const int spe_num = ntarg.spe_num;
    const int data_num = ntarg.A_num;
    const bool *A = (const bool *)(ntarg.A);
    bool *C = (bool *)(ntarg.C);
    const int thread_id = threadIdx;

    int block_size = 16 * 1024;
    int num_per_loop = block_size / sizeof(bool);
    if (num_per_loop * spe_num > data_num)
        num_per_loop =
            data_num / spe_num / 128 * 128 < 128 ? 128 : data_num / spe_num / 128 * 128 + 128;
    block_size = num_per_loop * sizeof(bool);

    const int num_all_core = num_per_loop * spe_num;
    int cur_num, next_num, next_i, flag_next;
    int i = thread_id * num_per_loop;
    if (i >= data_num) return;

    bool *Abuf = (bool *)malloc(block_size * 2);
    bool *Cbuf = (bool *)malloc(block_size * 2);
    int Abuf_size = num_per_loop * 2;
    int Cbuf_size = Abuf_size;

    int Abuf_dbflag = 0, Cbuf_dbflag = 0;
    MemcpyHandle get_handle[2], put_handle[2];

    cur_num = MIN(num_per_loop, data_num - i);
    allDmaIgetSdaa(CDBUF(Abuf), A + i, cur_num * sizeof(bool), get_handle[Abuf_dbflag]);

    for (; i < data_num; i += num_all_core) {
        next_i = i + num_all_core;
        flag_next = next_i < data_num;
        if (flag_next) {
            next_num = MIN(num_per_loop, data_num - next_i);
            allDmaIgetSdaa(ADBUF(Abuf), A + next_i, next_num * sizeof(bool),
                           get_handle[1 - Abuf_dbflag]);
        }
        memcpy_wait(get_handle[Abuf_dbflag]);
        memcpy_wait(put_handle[Cbuf_dbflag]);

        calBool(CDBUF(Abuf), CDBUF(Cbuf), cur_num);

        allDmaIputSdaa(C + i, CDBUF(Cbuf), cur_num * sizeof(bool), put_handle[Cbuf_dbflag]);

        if (flag_next) {
            EXDBF(Abuf);
            EXDBF(Cbuf);
            cur_num = next_num;
        }
    }

    memcpy_wait(put_handle[Cbuf_dbflag]);
    memcpy_wait(put_handle[1 - Cbuf_dbflag]);

    free(Abuf);
    free(Cbuf);
}

}  // namespace kernel
}  // namespace ual
}  // namespace tecoal
