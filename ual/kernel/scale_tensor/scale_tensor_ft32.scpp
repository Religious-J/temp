// BSD 3- Clause License Copyright (c) 2024, Tecorigin Co., Ltd. All rights
// reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
// Redistributions of source code must retain the above copyright notice,
// this list of conditions and the following disclaimer.
// Redistributions in binary form must reproduce the above copyright notice,
// this list of conditions and the following disclaimer in the documentation
// and/or other materials provided with the distribution.
// Neither the name of the copyright holder nor the names of its contributors
// may be used to endorse or promote products derived from this software
// without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
// STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  ARISING IN ANY
// WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
// OF SUCH DAMAGE.

#include "ual/kernel/scale_tensor/scale_tensor.h"
#include "ual/kernel/macro.h"

using namespace sdaa;
using namespace tecoal::ual::common;

namespace tecoal {
namespace ual {
namespace kernel {

// double buffer: current addr, another addr, exchange flag
#define CDBUF(x) (x + (x##_size >> 1) * x##_dbflag)
#define ADBUF(x) (x + (1 - x##_dbflag) * (x##_size >> 1))
#define EXDBF(x) x##_dbflag = 1 - x##_dbflag

#define BLOCK_NUM_FT32 (12 * 1024)

__global__ void tecoKernelScaleTensorFT32(ScaleTensorArgs arg) {
    int data_num = arg.data_num;
    float alpha = arg.x;
    float *y = (float *)arg.y;
    int thread_id = threadIdx;
    const int spe_num = arg.spe_num;
    int offset = thread_id * BLOCK_NUM_FT32;
    if (offset >= data_num) return;

    int x_buf_size = BLOCK_NUM_FT32 * 2;
    float *x_buf = (float *)malloc(x_buf_size * sizeof(float));
    int y_buf_size = BLOCK_NUM_FT32 * 2;
    float *y_buf = (float *)malloc(y_buf_size * sizeof(float));

    int x_buf_dbflag = 0;
    int y_buf_dbflag = 0;

    MemcpyHandle get_handle[2];
    MemcpyHandle put_handle[2];

    int stride = spe_num * BLOCK_NUM_FT32;
    int curr_num = ((offset + BLOCK_NUM_FT32) < data_num) ? BLOCK_NUM_FT32 : (data_num - offset);
    int next_num = 0;
    memcpy_async(CDBUF(x_buf), y + offset, curr_num * sizeof(float), MemcpyGlobalToSpm,
                 get_handle[x_buf_dbflag]);
    for (int Idx = offset; Idx < data_num; Idx += stride) {
        curr_num = ((Idx + BLOCK_NUM_FT32) <= data_num) ? BLOCK_NUM_FT32 : (data_num - Idx);
        next_num = ((Idx + stride + BLOCK_NUM_FT32) <= data_num) ? BLOCK_NUM_FT32 :
                                                                   (data_num - Idx - stride);

        if (next_num > 0) {
            memcpy_async(ADBUF(x_buf), y + Idx + stride, next_num * sizeof(float),
                         MemcpyGlobalToSpm, get_handle[x_buf_dbflag]);
        }

        memcpy_wait(get_handle[x_buf_dbflag]);
        memcpy_wait(put_handle[1 - y_buf_dbflag]);
        floatv16 v_x, v_y;
        for (int Cal_Idx = 0; Cal_Idx < curr_num; Cal_Idx += 16) {
            simd_load(v_x, CDBUF(x_buf) + Cal_Idx);
            v_y = alpha * v_x;
            simd_store(v_y, CDBUF(y_buf) + Cal_Idx);
        }

        memcpy_async(y + Idx, CDBUF(y_buf), curr_num * sizeof(float), MemcpySpmToGlobal,
                     put_handle[y_buf_dbflag]);
        EXDBF(x_buf);
        EXDBF(y_buf);
    }

    memcpy_wait(put_handle[1 - y_buf_dbflag]);
    free(x_buf);
    free(y_buf);
}

}  // namespace kernel
}  // namespace ual
}  // namespace tecoal